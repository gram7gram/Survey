<?php

namespace Gram\SurveyBundle\Tests\Services;

use Gram\SurveyBundle\Entity\CompletedSurvey;
use Gram\SurveyBundle\Form\CompletedSurvey\CompletedSurveyRESTType;
use Gram\SurveyBundle\Services\CompletedSurveyService;
use Gram\SurveyBundle\Tests\ContainerAwareTestCase;

class CompletedSurveyServiceTest extends ContainerAwareTestCase
{
    /** @var  CompletedSurveyService */
    private $service;

    public function testSerialize()
    {

        $completedSurvey = $this->testCreateSurvey();

        $serializedSurvey = $this->service->serialize($completedSurvey);

        $this->assertTrue(is_array($serializedSurvey), 'Not an array');
    }

    public function testCreateSurvey()
    {

        $json = $this->getValidJson();

        $form = $this->container->get('form.factory')->create(CompletedSurveyRESTType::class, null, [
            'method' => 'POST',
            'action' => $this->container->get('router')->generate('survey_rest_completed_survey_post')
        ]);

        $survey = json_decode($json, true);
        $survey['user']['email'] = md5(uniqid()) . '@xx.xx';

        $form->submit($survey);

        $this->assertTrue($form->isValid(), 'Not valid form');

        $completedSurvey = $this->service->createSurvey($form);

        $this->assertTrue($completedSurvey instanceof CompletedSurvey, 'Not a CompletedSurvey');

        return $completedSurvey;
    }

    public function getValidJson()
    {
        $root = $this->container->getParameter('kernel.root_dir');

        $file = $root . '/Resources/tests/CompletedSurvey_valid.json';

        $this->assertTrue(file_exists($file), 'Test file does not exist');

        $json = file_get_contents($file);

        return $json;
    }

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->service = $this->container->get('survey.completed_survey_rest_service');
    }

}